@startuml thux
' eventは各自のオブジェクトが持ちたい

class GLFWWindow {
    emscriptenの場合不要
}
GLFWWindow "1" -> "1" Window

class Window {
    setup([](){})
    update([](){} update)
}
' Window --> Scene
' Window --> Geometry

package Scene {
    Window "1" -> "1" Scene::Manager
    
    class Scene::Manager {
        map<id, SceneName>
        currentScene
        select()
        transition()
    }
    Scene::Manager "n" o-- "1" Scene

    Scene <|- AbstractScene
    abstract AbstractScene {
    }

    AbstractScene  <|- SceneInterface
    interface SceneInterface {
        setup()
        update()
        preTransition()
    }

    AbstractScene "1" <|- "1" Trasitioner
    abstract Trasitioner {
        transition()
    }
}

package Keyboard {
    ' 1 : n ? key('e')
    ' 1 : 1 key().press('e')
    class Key {
        release(actionName, [](){})
        press(actionName, [](){})
        repeat(actionName, [](){})
    }

    class Mapper {
        map<actionName, KeyID>
    }
}

package Geometry {
    class Geometry {
        array<Point, n> points
        array<Primitive, n> primitives
        array<Attribute, n> attributes
    }
    Scene o-- Geometry

    Geometry o-- Attribute

    object LazyLoadFunctions {

    }
    LazyLoadFunctions .> Geometry

    class Attribute {
        pair<string name, T> value
    }

    class Point {
        vec position
        Attribnute number
        Map<Attribute, Name> customAttribute
    }
    Attribute <|-- Point

    class Primitive {
        array vercitesTriangle<Vertex, 3>
        array vercitesRectangle<Vertex, 4>
        Attribnute number
        Map<Attribute, Name> customAttribute
    }
    Attribute <|-- Primitive

    class Vertex {
        vec position
    }
    Vertex -o Primitive
    ' Vertex <|- Attribute
}
@enduml